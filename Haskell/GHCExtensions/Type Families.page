---
toc: no
...

# GHC Language Extensions: Type Families

## Open Type Families

Open Type Families can be extended in other modules, like you can add instances to classes in other modules.

Type Families are somehow similar to aliases. Her we map the alias *AddResult a b* to some type:

~~~ {.haskell}

{-# LANGUAGE MultiParamTypeClass #-}
{-# LANGUAGE TypeFamilies #-}

type family AddResult a b
type instance AddResult Double Double = Double
type instance AddResult Int Double = Double
type instance AddResult Double Int = Double
type instance AddResult Int Int = Int
~~~

To use this, we need some class and instance definitions

~~~ {.haskell}
class MyAdder a b where
    add :: a -> b -> AddResult a b

instance MyAdder Double Double where
    add a b = a + b
instance MyAdder Int Double where
    add a b = realToFrac a + b
instance MyAdder Double Int where
    add a b = a + realToFrac b
instance MyAdder Int Int where
    add a b = a + b
~~~

Now we can use this in an intractive GHCi session. Note: we have to specify the type of the inputs.

~~~
let i5 = 5 :: Int
let d5 = 5 :: Double

add i5 i5
add d5 d5
add i5 d5
~~~