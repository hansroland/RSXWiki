---
toc: no
...

# Cabal Packet Manager

## Nix Style Builds

Nix-style cabal builds allow to have multiple versions of a package in the local Haskell package store.

The packages are build into the directory ~/.cabal/store.

cabal new-configure
:    Configures the package

cabal new-build
:    Builds the package. This is also used to install packages

cabal new-repl
:    Starts the ghci, which load the packages from ~/.cabal/store

## Sandboxes

I generally advise to use **always** sandboxes. This is (with exception of stack), the best way to avoid cabal or dependeny hell.

cabal sandbox init
:   Initialize a sandbox

cabal sandbox add-source path/to/project/dir
:   Make the local project available for this project

cabal sandbox delete
:   Remove the cabal sandbox of the current directory

cabal repl
:   Fire up GHCi. Note that we are on base directory of the project. Load files with :l src/file.hs

cabal repl test
:   Fire up GHCi with the libraries of the test cabal section

cabal install -dependencies-only
:   Install all the dependencies in the .cabal project file (mostly used with sandboxes)

cabal build
:   Builds the project

cabal test
:   Run the tests (if any ...)

cabal exec
:   Run the executable.
    Use **cabal exec myprog** to run the programm myprog. Use **cabal exec myprog -- --myparam** to pass the parameter myparam to the program myprog.  (note -- are to hyphens...)



## Other Cabal subcommands

cabal get
:   Download and Extract package source

cabal init
:   Initializes a *.cabal project file