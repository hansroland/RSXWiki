---
toc: no
...

# Typeclass Foldable

## Overview

## Definition


~~~ { .haskell }
class Foldable t where
    {-# MINIMAL foldMap | foldr #-}

    -- | Combine the elements of a structure using a monoid.
    fold :: Monoid m => t m -> m

    -- | Map each element of the structure to a monoid,
    -- and combine the results.
    foldMap :: Monoid m => (a -> m) -> t a -> m

    -- | Right-associative fold of a structure.
    foldr :: (a -> b -> b) -> b -> t a -> b

    -- | Left-associative fold of a structure but with strict application of
    -- the operator.
    foldl' :: (b -> a -> b) -> b -> t a -> b


~~~


## Other Functions

~~~ { .haskell }
sum     :: Num a => t a -> a
product :: Num a => t a -> a
~~~ 

Note: *sum* an *product* take the value(s) out of the container / context. For empty structures eg **Maybe**s a default for *Nothing* is assumed!

~~~ { .haskell }
minimum :: (Ord a, Foldable t) => t a -> a
maximum :: (Ord a, Foldable t) => t a -> a
~~~ 

Note: *minimum* and *maximum* do not operate on empty structures (eg [] or Nothing