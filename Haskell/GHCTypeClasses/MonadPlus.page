---
toc: no
...
# Typeclass MonadPlus

The *MonadPlus* type is for monads that can also act as monoids!

## Definition

~~~ { .haskell }
class Monad m => MonadPlus m where
    mzero :: m a
    mplus :: m a -> m a -> m a
~~~

*mzero* corresponds to *mempty* and *mplus* to *mappend*

## Laws

## Instances

## Additional Functions

### guard

~~~ { .haskell }
guard :: (MonadPlus m) => Bool -> m ()
guard true = return ()
guard False = mzero
~~~

guard can be used to filter on non-deterministic computations

~~~ { .haskell }
[1..50] >>= (\x -> guard ('7' `elem` show x) >> return x)
[7,17,27,37,47]
~~~

For lists this is the same as the list comprehension syntax. So guard generalises the functionality of list comprehension to other MonadPlus instances.

## Example

Chess game: Find all the positions a Knight (*Springer*, *RÃ¶ssli*) can reach from its current position:

~~~ { .haskell }
type KnightPos = (Int,Int)

moveKnight :: KnightPos -> [KnightPos]
moveKnight (c,r) = filter onBoard
    [(c+2,r-1),(c+2,r+1),(c-2,r-1),(c-2,r+1)
    ,(c+1,r-2),(c+1,r+2),(c-1,r-2),(c-1,r+2)
    ]
    where onBoard (c,r) = c `elem` [1..8] && r `elem` [1..8]

~~~

Find all the positions the Knight can reach in 3 moves and check whether a position can be reachee in 3 moves:

~~~ { .haskell }
in3 :: KnightPos -> [KightPos]
in3 start = return start >>= moveKnight >>= moveKnight >>= moveKnight

canReachIn3 :: KnightPos -> KnightPos -> Bool
canReachIn3 start end = end `elem` in3 start
~~~


Notes:

* moveKnight could also be written with guard

~~~ { .haskell }
moveKnight :: KnightPos -> [KnightPos]
moveKnight (c,r) = do
    (c',r') <- [(c+2,r-1),(c+2,r+1),(c-2,r-1),(c-2,r+1)
               ,(c+1,r-2),(c+1,r+2),(c-1,r-2),(c-1,r+2)
               ]
    guard (c' `elem` [1..8] && r' `elem` [1..8])
    return (c',r')

~~~

* results for these functions

~~~ { .haskell }
moveKnight (6,2)
[(8,1),(8,3),(4,1),(4,3),(7,4),(5,4)]

(6,2) `canReachIn3` (6,1)
True
~~~
